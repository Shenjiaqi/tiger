%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 
  UMINUS
  R_INT R_STRING

%start program

%nonassoc EQ NEQ LT LE GT GE
%left OR
%left AND
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program: exp
;

decs: dec |
; 

dec: tydec |
vardec |
fundec
;

tydec: TYPE type_id ASSIGN ty

ty: type_id |
LPAREN tyfields RPAREN |
ARRAY OF type_id
;

tyfields: tyfields_opt |

;

tyfields_opt: tyfields_opt COMMA ID COLON type_id |
ID COLON type_id
;

vardec: VAR ID ASSIGN exp |
VAR ID type_id ASSIGN exp
;

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp |
FUNCTION ID LPAREN tyfields RPAREN COLON type_id EQ exp;

lvalue: ID |
lvalue DOT ID |
lvalue LBRACK exp RBRACK
;

exp: lvalue |
novalue |
NIL|
seq|
int_c|
string_c|
neg_val |
exp al_op exp|
exp cp_op exp|
string_c cp_op string_c|
exp bool_op exp|
paren|
rec_crt|
array_crt|

;

array_crt: type_id LBRACK exp RBRACK OF exp
;

rec_crt: type_id LBRACE rec_list RBRACE
;

rec_list: rec_list_opt |

;

rec_list_opt: rec_list_opt COMMA ID EQ exp |
ID EQ exp
;

al_op: PLUS|
MINUS|
TIMES|
DIVIDE
;

cp_op: EQ|
NEQ|
LT|
LE|
GT|
GE
;

bool_op: AND|
OR
;

neg_val: MINUS INT %prec UMINUS
;

string_c: STRING
;

int_c: INT
;

paren: LPAREN exp RPAREN
;

seq: LPAREN expseq RPAREN
;

type_id: ID |
R_INT |
R_STRING
;

novalue: func_call |
assignment |
if_then |
if_then_else |
while_ |
break_ |
for_ |
let_
;

func_call: ID LPAREN exp_list RPAREN;

exp_list: exp_list_opt |

;

exp_list_opt: exp_list_opt COMMA exp |
exp
;

assignment: lvalue ASSIGN exp
;

if_then: IF exp THEN exp
;

if_then_else: IF exp THEN exp ELSE exp
;

while_: WHILE exp DO exp
;

for_: FOR ID ASSIGN exp TO exp DO exp
;

break_: BREAK
;

let_: LET decs IN expseq END
;

expseq: expseq_opt |
;

expseq_opt: expseq_opt COLON exp |
exp
;
